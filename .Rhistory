# Note the points.col argument; I recommend brewer.set3 when looking at the whole genome because the points from different chromosomes will be coloured distinctly, although we can't see that here as I have data from only one chromosome
title(main = 'CDH18 region', cex.main = 1.5)
#at<-autotrack(3, 3, margin = autotrack.margin)
#kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$PP, points.col  =  "black", r0 = at$r0, r1 = at$r1, ymax = 1, points.cex=1, logp = FALSE, suggestive.col = "white", genomewide.col = "white")
#kpAddLabels(kp, labels  =  "PP", srt = 90, pos = 3, r0 = at$r0, r1 = at$r1, cex = cex.label, label.margin = 0.06)
#kpAxis(kp, ymin = 0, ymax = 1, r0 = at$r0, r1 = at$r1)
#kpPoints(kp, data=trajGRanges[which.min(trajGRanges$P),], y = trajGRanges$PP[which.min(trajGRanges$P)], pch=1, cex=2, col="red", ymax=1, r0=at$r0, r1 = at$r1)
#kpText(kp, data=trajGRanges[which.min(trajGRanges$P),], y = trajGRanges$PP[which.min(trajGRanges$P)], labels = "rs145715205", pos=2, ymax=1, r0=at$r0, col = "red", r1 = at$r1)
#at<-autotrack(2, 3, margin = 0.07)
#kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0, r1 = at$r1, ymax = ymax, points.cex=1)
#kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = at$r0, r1 = at$r1, cex = cex.label, label.margin = 0.06)
#kpAxis(kp, ymin = 0, ymax = ymax, r0 = at$r0, r1 = at$r1)
#kpPoints(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), pch=1, cex=2, col="red", ymax=ymax, r0=at$r0, r1 = at$r1)
#kpText(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), labels = "rs145715205", pos=2, ymax=ymax, r0=at$r0, col = "red", r1 = 0.625)
at<-autotrack(2, 2, margin = 0.07)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0, r1 = at$r1, ymax = ymax, points.cex=1)
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = at$r0, r1 = at$r1, cex = cex.label, label.margin = 0.06)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = at$r0, r1 = at$r1)
kpPoints(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), pch=1, cex=2, col="red", ymax=ymax, r0=at$r0, r1 = at$r1)
kpText(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), labels = "rs145715205", pos=2, ymax=ymax, r0=at$r0, col = "red", r1 = 0.95)
# Needed to install org.Hs.eg.db with BiocManager::install to get this running
genes.data <- makeGenesDataFromTxDb(karyoplot = kp, txdb = TxDb.Hsapiens.UCSC.hg19.knownGene)
genes.data <- addGeneNames(genes.data)
genes.data.merged <- mergeTranscripts(genes.data)
kp <- kpPlotGenes(kp, data = genes.data.merged, r0 = 0, r1 = 0.2, gene.name.cex = 0.8, gene.name.position = 'right')
dev.off()
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000)
title(main = 'CDH18 region', cex.main = 1.5)
at<-autotrack(2, 2, margin = 0)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0, r1 = at$r1, ymax = ymax, points.cex=1)
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = at$r0, r1 = at$r1, cex = cex.label, label.margin = 0.06)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = at$r0, r1 = at$r1)
at$r0
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0+1, r1 = at$r1, ymax = ymax, points.cex=1)
at$r1
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0+1, r1 = at$r1+1, ymax = ymax, points.cex=1)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0+1, r1 = at$r1-1, ymax = ymax, points.cex=1)
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000)
title(main = 'CDH18 region', cex.main = 1.5)
at<-autotrack(2, 2, margin = 0.07)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0+1, r1 = at$r1-1, ymax = ymax, points.cex=1)
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = at$r0, r1 = at$r1, cex = cex.label, label.margin = 0.06)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0+1, r1 = at$r1, ymax = ymax, points.cex=1)
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000)
at<-autotrack(2, 2, margin = 0.07)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0+1, r1 = at$r1, ymax = ymax, points.cex=1)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0, r1 = at$r1, ymax = ymax, points.cex=1)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0, r1 = at$r1-0.2, ymax = ymax, points.cex=1)
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000)
title(main = 'CDH18 region', cex.main = 1.5)
at<-autotrack(2, 2, margin = 0.07)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0, r1 = at$r1-0.2, ymax = ymax, points.cex=1)
at<-autotrack(1, 1, margin = 0.07)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = at$r0, r1 = at$r1, ymax = ymax, points.cex=1)
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = at$r0, r1 = at$r1, cex = cex.label, label.margin = 0.06)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = at$r0, r1 = at$r1)
kpPoints(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), pch=1, cex=2, col="red", ymax=ymax, r0=at$r0, r1 = at$r1)
kpText(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), labels = "rs145715205", pos=2, ymax=ymax, r0=at$r0, col = "red", r1 = 0.95)
rm(list=ls())
traj_res <- readRDS("trajresults/final-pooled-res.RDS")
chr_range <- 5
bp_range <- c(20409042 - 5000000, 20409042 + 5000000)
traj_res_myregion_tmp <- traj_res[which(traj_res$chr == chr_range),]
traj_res_myregion <- traj_res_myregion_tmp[which(traj_res_myregion_tmp$ps >= bp_range[1] & traj_res_myregion_tmp$ps <= bp_range[2]),]
traj_res_myregion[ , chr := paste0('chr', chr)]
colnames(traj_res_myregion)[c(1,2,9)] <- c("CHR19","BP19","P")
trajGRanges <- makeGRangesFromDataFrame(data.frame(traj_res_myregion), start.field = 'BP19', end.field = 'BP19', seqnames.field = 'CHR19', ignore.strand = T, keep.extra.columns = T)
cex.label <- 1
ymax <- 10
label.margin <- 0.05
# The % of the total plotting space to leave in each margin between the tracks
r0 <- 0.25
pp <- getDefaultPlotParams(plot.type=4)
pp$leftmargin <- 0.1pp <- getDefaultPlotParams(plot.type=4)
pp$leftmargin <- 0.1
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000)
pp$leftmargin <- 0.1
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = r0, ymax = ymax, points.cex=1)
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = r0, cex = cex.label, label.margin = 0.06)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = r0)
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = r0, ymax = ymax, points.cex=1)
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = r0, cex = cex.label, label.margin = 0.06)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = r0, suggestiveline = -log10(1e-06)))
kpAxis(kp, ymin = 0, ymax = ymax, r0 = r0, suggestiveline = -log10(1e-06))
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000)
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = r0, ymax = ymax, points.cex=1, suggestiveline = -log10(1e-06))
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = r0, cex = cex.label, label.margin = 0.06)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = r0)
# Needed to install org.Hs.eg.db with BiocManager::install to get this running
genes.data <- makeGenesDataFromTxDb(karyoplot = kp, txdb = TxDb.Hsapiens.UCSC.hg19.knownGene)
genes.data <- addGeneNames(genes.data)
genes.data.merged <- mergeTranscripts(genes.data)
kp <- kpPlotGenes(kp, data = genes.data.merged, r0 = 0, r1 = 0.2, gene.name.cex = 0.8, gene.name.position = 'right')
kpPoints(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), pch=1, cex=2, col="red", ymax=ymax, r0=r0)
kpText(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), labels = "rs145715205", pos=2, ymax=ymax, r0=r0, col = "red")
cex.label <- 1
ymax <- 11
label.margin <- 0.05
# The % of the total plotting space to leave in each margin between the tracks
r0 <- 0.25
pp <- getDefaultPlotParams(plot.type=4)
pp$leftmargin <- 0.1
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = r0, ymax = ymax, points.cex=1, suggestiveline = -log10(1e-06))
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = r0, cex = cex.label, label.margin = 0.06)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = r0)
kpPoints(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), pch=1, cex=2, col="red", ymax=ymax, r0=r0)
kpText(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), labels = "rs145715205", pos=2, ymax=ymax, r0=r0, col = "red")
# Needed to install org.Hs.eg.db with BiocManager::install to get this running
genes.data <- makeGenesDataFromTxDb(karyoplot = kp, txdb = TxDb.Hsapiens.UCSC.hg19.knownGene)
genes.data <- addGeneNames(genes.data)
genes.data.merged <- mergeTranscripts(genes.data)
kp <- kpPlotGenes(kp, data = genes.data.merged, r0 = 0, r1 = 0.2, gene.name.cex = 0.8, gene.name.position = 'right')
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp, ideogram.plotter = NULL)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = r0, ymax = ymax, points.cex=1, suggestiveline = -log10(1e-06))
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = r0, cex = cex.label, label.margin = 0.06)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = r0)
kpPoints(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), pch=1, cex=2, col="red", ymax=ymax, r0=r0)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = r0, ymax = ymax, points.cex=1, suggestiveline = -log10(1e-06))
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = r0, cex = cex.label, label.margin = 0.06)
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp, ideogram.plotter = NULL)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000)
??kpAddBaseNumbers
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp, ideogram.plotter = NULL)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000, tick.len = 2)
png("CDH18.png", width = 600, height = 500)
cex.label <- 1
ymax <- 11
label.margin <- 0.05
# The % of the total plotting space to leave in each margin between the tracks
r0 <- 0.25
pp <- getDefaultPlotParams(plot.type=4)
pp$leftmargin <- 0.1
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp, ideogram.plotter = NULL)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000, tick.len = 2)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  "black", r0 = r0, ymax = ymax, points.cex=1, suggestiveline = -log10(1e-06))
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = r0, cex = cex.label, label.margin = 0.06)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = r0)
kpPoints(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), pch=1, cex=2, col="red", ymax=ymax, r0=r0)
kpText(kp, data=trajGRanges[which.min(trajGRanges$P),], y = -log10(trajGRanges$P[which.min(trajGRanges$P)]), labels = "rs145715205", pos=2, ymax=ymax, r0=r0, col = "red")
# Needed to install org.Hs.eg.db with BiocManager::install to get this running
genes.data <- makeGenesDataFromTxDb(karyoplot = kp, txdb = TxDb.Hsapiens.UCSC.hg19.knownGene)
genes.data <- addGeneNames(genes.data)
genes.data.merged <- mergeTranscripts(genes.data)
kp <- kpPlotGenes(kp, data = genes.data.merged, r0 = 0, r1 = 0.2, gene.name.cex = 0.8, gene.name.position = 'right')
dev.off()
latestACR_res <- readRDS("latestvisit results/final-pooled-res.RDS")
chr_range <- 4
bp_range <- c(171934268 - 1000000, 171934268 + 1000000)
latestACR_res_myregion_tmp <- latestACR_res[which(latestACR_res$chr == chr_range),]
latestACR_res_myregion <- latestACR_res_myregion_tmp[which(latestACR_res_myregion_tmp$ps >= bp_range[1] & latestACR_res_myregion_tmp$ps <= bp_range[2]),]
latestACR_res_myregion[ , chr := paste0('chr', chr)]
colnames(latestACR_res_myregion)[c(1,2,9)] <- c("CHR19","BP19","P")
latestACRGRanges <- makeGRangesFromDataFrame(data.frame(latestACR_res_myregion), start.field = 'BP19', end.field = 'BP19', seqnames.field = 'CHR19', ignore.strand = T, keep.extra.columns = T)
cex.label <- 1
ymax <- 11
label.margin <- 0.05
# The % of the total plotting space to leave in each margin between the tracks
r0 <- 0.25
pp <- getDefaultPlotParams(plot.type=4)
pp$leftmargin <- 0.1
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp, ideogram.plotter = NULL)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000, tick.len = 2)
kp <- kpPlotManhattan(kp, data = latestACRGRanges, pval = latestACRGRanges$P, points.col  =  "black", r0 = r0, ymax = ymax, points.cex=1, suggestiveline = -log10(1e-06))
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = r0, cex = cex.label, label.margin = 0.06)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = r0)
kpPoints(kp, data=latestACRGRanges[which.min(latestACRGRanges$P),], y = -log10(latestACRGRanges$P[which.min(latestACRGRanges$P)]), pch=1, cex=2, col="red", ymax=ymax, r0=r0)
# add blue circles around other SNPs in credset
kpPoints(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171864867:G:A"),], y = latestACRGRanges$PP[which(latestACRGRanges$rs=="4:171864867:G:A")], pch=1, cex=2, col="blue", ymax=1, r0=r0)
# add blue circles around other SNPs in credset
kpPoints(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171864867:G:A"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171864867:G:A")]), pch=1, cex=2, col="blue", ymax=1, r0=r0)
# add blue circles around other SNPs in credset
kpPoints(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171864867:G:A"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171864867:G:A")]), pch=1, cex=2, col="blue", ymax=ymax, r0=r0)
kpPoints(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171957178:C:G"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171957178:C:G")]), pch=1, cex=2, col="blue", ymax=ymax, r0=r0)
kpText(kp, data=latestACRGRanges[which.min(latestACRGRanges$P),], y = -log10(latestACRGRanges$P[which.min(latestACRGRanges$P)]), labels = "rs150766792", pos=2, ymax=ymax, r0=r0, col = "red")
kpText(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171864867:G:A"),], y = -log10(latestACRGRanges$P[which.min(latestACRGRanges$P)]), labels = "rs140921123", pos=2, ymax=ymax, r0=r0, col = "red")
kpText(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171864867:G:A"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171864867:G:A")]), labels = "rs140921123", pos=2, ymax=ymax, r0=r0, col = "red")
kpText(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171957178:C:G"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171957178:C:G")]), labels = "rs12502900", pos=2, ymax=ymax, r0=r0, col = "blue")
kpText(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171957178:C:G"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171957178:C:G")]), labels = "rs12502900", pos=3, ymax=ymax, r0=r0, col = "blue")
kpText(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171957178:C:G"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171957178:C:G")]), labels = "rs12502900", pos=4, ymax=ymax, r0=r0, col = "blue")
cex.label <- 1
ymax <- 11
label.margin <- 0.05
# The % of the total plotting space to leave in each margin between the tracks
r0 <- 0.25
pp <- getDefaultPlotParams(plot.type=4)
pp$leftmargin <- 0.1
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp, ideogram.plotter = NULL)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000, tick.len = 2)
kp <- kpPlotManhattan(kp, data = latestACRGRanges, pval = latestACRGRanges$P, points.col  =  "black", r0 = r0, ymax = ymax, points.cex=1, suggestiveline = -log10(1e-06))
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = r0, cex = cex.label, label.margin = 0.06)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = r0)
kpPoints(kp, data=latestACRGRanges[which.min(latestACRGRanges$P),], y = -log10(latestACRGRanges$P[which.min(latestACRGRanges$P)]), pch=1, cex=2, col="red", ymax=ymax, r0=r0)
kpText(kp, data=latestACRGRanges[which.min(latestACRGRanges$P),], y = -log10(latestACRGRanges$P[which.min(latestACRGRanges$P)]), labels = "rs150766792", pos=2, ymax=ymax, r0=r0, col = "red")
# add blue circles around other SNPs in credset
kpPoints(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171864867:G:A"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171864867:G:A")]), pch=1, cex=2, col="blue", ymax=ymax, r0=r0)
kpPoints(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171957178:C:G"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171957178:C:G")]), pch=1, cex=2, col="blue", ymax=ymax, r0=r0)
kpText(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171864867:G:A"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171864867:G:A")]), labels = "rs140921123", pos=2, ymax=ymax, r0=r0, col = "blue")
kpText(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171957178:C:G"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171957178:C:G")]), labels = "rs12502900", pos=4, ymax=ymax, r0=r0, col = "blue")
# Needed to install org.Hs.eg.db with BiocManager::install to get this running
genes.data <- makeGenesDataFromTxDb(karyoplot = kp, txdb = TxDb.Hsapiens.UCSC.hg19.knownGene)
genes.data <- addGeneNames(genes.data)
genes.data.merged <- mergeTranscripts(genes.data)
kp <- kpPlotGenes(kp, data = genes.data.merged, r0 = 0, r1 = 0.2, gene.name.cex = 0.8, gene.name.position = 'right')
chr_range <- 4
bp_range <- c(171934268 - 5000000, 171934268 + 5000000)
latestACR_res_myregion_tmp <- latestACR_res[which(latestACR_res$chr == chr_range),]
latestACR_res_myregion <- latestACR_res_myregion_tmp[which(latestACR_res_myregion_tmp$ps >= bp_range[1] & latestACR_res_myregion_tmp$ps <= bp_range[2]),]
latestACR_res_myregion[ , chr := paste0('chr', chr)]
colnames(latestACR_res_myregion)[c(1,2,9)] <- c("CHR19","BP19","P")
latestACRGRanges <- makeGRangesFromDataFrame(data.frame(latestACR_res_myregion), start.field = 'BP19', end.field = 'BP19', seqnames.field = 'CHR19', ignore.strand = T, keep.extra.columns = T)
png("LINC02431.png", width = 600, height = 500)
cex.label <- 1
ymax <- 11
label.margin <- 0.05
# The % of the total plotting space to leave in each margin between the tracks
r0 <- 0.25
pp <- getDefaultPlotParams(plot.type=4)
pp$leftmargin <- 0.1
kp <- plotKaryotype(plot.type = 4, labels.plotter = NULL, zoom = paste0("chr",chr_range,":",bp_range[1],"-",bp_range[2]), plot.params = pp, ideogram.plotter = NULL)
kpAddBaseNumbers(kp, add.units = T, cex = 0.75, tick.dist = 1000000, tick.len = 2)
kp <- kpPlotManhattan(kp, data = latestACRGRanges, pval = latestACRGRanges$P, points.col  =  "black", r0 = r0, ymax = ymax, points.cex=1, suggestiveline = -log10(1e-06))
kpAddLabels(kp, labels  =  expression(-log[10] ~ (p)), srt = 90, pos = 3, r0 = r0, cex = cex.label, label.margin = 0.06)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = r0)
kpPoints(kp, data=latestACRGRanges[which.min(latestACRGRanges$P),], y = -log10(latestACRGRanges$P[which.min(latestACRGRanges$P)]), pch=1, cex=2, col="red", ymax=ymax, r0=r0)
kpText(kp, data=latestACRGRanges[which.min(latestACRGRanges$P),], y = -log10(latestACRGRanges$P[which.min(latestACRGRanges$P)]), labels = "rs150766792", pos=2, ymax=ymax, r0=r0, col = "red")
# add blue circles around other SNPs in credset
kpPoints(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171864867:G:A"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171864867:G:A")]), pch=1, cex=2, col="blue", ymax=ymax, r0=r0)
kpPoints(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171957178:C:G"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171957178:C:G")]), pch=1, cex=2, col="blue", ymax=ymax, r0=r0)
kpText(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171864867:G:A"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171864867:G:A")]), labels = "rs140921123", pos=2, ymax=ymax, r0=r0, col = "blue")
kpText(kp, data=latestACRGRanges[which(latestACRGRanges$rs=="4:171957178:C:G"),], y = -log10(latestACRGRanges$P[which(latestACRGRanges$rs=="4:171957178:C:G")]), labels = "rs12502900", pos=4, ymax=ymax, r0=r0, col = "blue")
# Needed to install org.Hs.eg.db with BiocManager::install to get this running
genes.data <- makeGenesDataFromTxDb(karyoplot = kp, txdb = TxDb.Hsapiens.UCSC.hg19.knownGene)
genes.data <- addGeneNames(genes.data)
genes.data.merged <- mergeTranscripts(genes.data)
kp <- kpPlotGenes(kp, data = genes.data.merged, r0 = 0, r1 = 0.2, gene.name.cex = 0.8, gene.name.position = 'right')
dev.off()
setwd("~/Google Drive/PhD/T1D-ACR-new")
library(ggplot2)
library(cowplot)
source("../my_fig_source.R")
df <- readRDS("df-withresidual-iter1.RDS")
phenotype <- readRDS("phenotypes-iter1.RDS")
x <- readRDS("secondary-phenotypes.RDS")
highest_latest <- "101090566Z"
lowest_latest <- "101185511A"
x[order(x$latestACR.imp1),]
# get study sample IDs back
final_df <- readRDS("final_df.RDS")
final_df <- final_df[-which(is.na(final_df$treatment.allocation)),]
# get study sample IDs back
final_df <- readRDS("final_df.RDS")
final_df <- final_df[-which(is.na(final_df$treatment.allocation)),]
df$StudyID <- final_df$StudyID
df <- cbind(df, phenotype[match(df$StudyID, phenotype$StudyID),c(2,3,5,6,7)])
cols <- c("Trajectory" = '#56B4E9', "Average residual" = "#CC79A7", "Latest ACR" = "#E69F00")
# sample with biggest / smallest values
df_sample <- df[c(sample(1:nrow(df), 1000), which(df$StudyID == df$StudyID[which.max(df$AveResidual)]), which(df$StudyID == df$StudyID[which.min(df$brms.Slope)]), which(df$StudyID == df$StudyID[which.max(df$brms.Slope)]), which(df$StudyID==highest_latest), which(df$StudyID==lowest_latest)),]
one <- ggplot(df_sample, aes(x = visit_duration, y = residual, group = StudyID)) +
geom_line(col = "gray", size = 0.3) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_point(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.max(df_sample$brms.Slope)]),], size = 1, col = '#56B4E9') + geom_line(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.max(df_sample$brms.Slope)]),], aes(x = visit_duration, y = residual, colour = "Trajectory"), size = 0.5)+ geom_point(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.max(df_sample$AveResidual)]),], size = 1, col = '#CC79A7') + geom_line(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.max(df_sample$AveResidual)]),], aes(x = visit_duration, y = residual, colour = "Average residual"), size = 0.5)+ geom_point(data = df_sample[which(df_sample$StudyID==highest_latest),], size = 1, col = '#E69F00') + geom_line(data = df_sample[which(df_sample$StudyID==highest_latest),], aes(x = visit_duration, y = residual, colour = "Latest ACR"), size = 0.5)+ scale_colour_manual(name="Phenotype",values=cols)+
xlab("Duration of diabetes")+
ylab("ACR (covariate adjusted)") + theme(axis.text= element_text(size=8), axis.title = element_text(size=10))
two <- ggplot(df_sample, aes(x = visit_duration, y = residual, group = StudyID)) +
geom_line(col = "gray", size = 0.3) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_point(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.min(df_sample$brms.Slope)]),], size = 1, col = '#56B4E9') + geom_line(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.min(df_sample$brms.Slope)]),], aes(x = visit_duration, y = residual, colour = "Trajectory"), size = 0.5) + geom_line(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.min(df_sample$AveResidual)]),], aes(x = visit_duration, y = residual, colour = "Average residual"), size = 0.5)+ geom_point(data = df_sample[which(df_sample$StudyID==lowest_latest),], size = 1, col = '#E69F00') + geom_line(data = df_sample[which(df_sample$StudyID==lowest_latest),], aes(x = visit_duration, y = residual, colour = "Latest ACR"), size = 0.5)+ scale_colour_manual(name="Phenotype",values=cols)+ geom_point(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.min(df_sample$AveResidual)]),], size = 1, col = '#CC79A7')+
xlab("Duration of diabetes")+
ylab("ACR (covariate adjusted)") + theme(axis.text= element_text(size=8), axis.title = element_text(size=10))+
theme(strip.text.x = element_blank(),
strip.background = element_rect(colour="white", fill="white"),
legend.position=c(.65,.9),
legend.title = element_text(size = 7),
legend.text  = element_text(size = 6),
legend.key.size = unit(0.6, "lines"),
legend.spacing.x = unit(0.2, 'cm')
) +
guides(shape = guide_legend(override.aes = list(size = 0.5)),
color = guide_legend(override.aes = list(size = 0.5)))
p = plot_grid(one+theme(legend.position = "none"), two, nrow = 1, labels = c("A","B"))
p
cols <- c("Trajectory" = '#56B4E9', "Average ACR" = "#CC79A7", "Latest ACR" = "#E69F00")
#my_samples <- sample(unique(df$StudyID), 300)
# df[which(df$StudyID %in% my_samples),]
# sample with biggest / smallest values
df_sample <- df[c(sample(1:nrow(df), 1000), which(df$StudyID == df$StudyID[which.max(df$AveResidual)]), which(df$StudyID == df$StudyID[which.min(df$brms.Slope)]), which(df$StudyID == df$StudyID[which.max(df$brms.Slope)]), which(df$StudyID==highest_latest), which(df$StudyID==lowest_latest)),]
one <- ggplot(df_sample, aes(x = visit_duration, y = residual, group = StudyID)) +
geom_line(col = "gray", size = 0.3) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_point(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.max(df_sample$brms.Slope)]),], size = 1, col = '#56B4E9') + geom_line(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.max(df_sample$brms.Slope)]),], aes(x = visit_duration, y = residual, colour = "Trajectory"), size = 0.5)+ geom_point(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.max(df_sample$AveResidual)]),], size = 1, col = '#CC79A7') + geom_line(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.max(df_sample$AveResidual)]),], aes(x = visit_duration, y = residual, colour = "Average residual"), size = 0.5)+ geom_point(data = df_sample[which(df_sample$StudyID==highest_latest),], size = 1, col = '#E69F00') + geom_line(data = df_sample[which(df_sample$StudyID==highest_latest),], aes(x = visit_duration, y = residual, colour = "Latest ACR"), size = 0.5)+ scale_colour_manual(name="Phenotype",values=cols)+
xlab("Duration of diabetes")+
ylab("ACR (covariate adjusted)") + theme(axis.text= element_text(size=8), axis.title = element_text(size=10))
two <- ggplot(df_sample, aes(x = visit_duration, y = residual, group = StudyID)) +
geom_line(col = "gray", size = 0.3) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_point(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.min(df_sample$brms.Slope)]),], size = 1, col = '#56B4E9') + geom_line(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.min(df_sample$brms.Slope)]),], aes(x = visit_duration, y = residual, colour = "Trajectory"), size = 0.5) + geom_line(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.min(df_sample$AveResidual)]),], aes(x = visit_duration, y = residual, colour = "Average residual"), size = 0.5)+ geom_point(data = df_sample[which(df_sample$StudyID==lowest_latest),], size = 1, col = '#E69F00') + geom_line(data = df_sample[which(df_sample$StudyID==lowest_latest),], aes(x = visit_duration, y = residual, colour = "Latest ACR"), size = 0.5)+ scale_colour_manual(name="Phenotype",values=cols)+ geom_point(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.min(df_sample$AveResidual)]),], size = 1, col = '#CC79A7')+
xlab("Duration of diabetes")+
ylab("ACR (covariate adjusted)") + theme(axis.text= element_text(size=8), axis.title = element_text(size=10))+
theme(strip.text.x = element_blank(),
strip.background = element_rect(colour="white", fill="white"),
legend.position=c(.65,.9),
legend.title = element_text(size = 7),
legend.text  = element_text(size = 6),
legend.key.size = unit(0.6, "lines"),
legend.spacing.x = unit(0.2, 'cm')
) +
guides(shape = guide_legend(override.aes = list(size = 0.5)),
color = guide_legend(override.aes = list(size = 0.5)))
p = plot_grid(one+theme(legend.position = "none"), two, nrow = 1, labels = c("A","B"))
ggsave_halfheight("comparing-phenotypes.png", p )
source("fig_source.R")
ggsave_halfheight("comparing-phenotypes.png", p )
one <- ggplot(df_sample, aes(x = visit_duration, y = residual, group = StudyID)) +
geom_line(col = "gray", size = 0.3) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_point(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.max(df_sample$brms.Slope)]),], size = 1, col = '#56B4E9') + geom_line(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.max(df_sample$brms.Slope)]),], aes(x = visit_duration, y = residual, colour = "Trajectory"), size = 0.5)+ geom_point(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.max(df_sample$AveResidual)]),], size = 1, col = '#CC79A7') + geom_line(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.max(df_sample$AveResidual)]),], aes(x = visit_duration, y = residual, colour = "Average ACR"), size = 0.5)+ geom_point(data = df_sample[which(df_sample$StudyID==highest_latest),], size = 1, col = '#E69F00') + geom_line(data = df_sample[which(df_sample$StudyID==highest_latest),], aes(x = visit_duration, y = residual, colour = "Latest ACR"), size = 0.5)+ scale_colour_manual(name="Phenotype",values=cols)+
xlab("Duration of diabetes")+
ylab("ACR (covariate adjusted)") + theme(axis.text= element_text(size=8), axis.title = element_text(size=10))
two <- ggplot(df_sample, aes(x = visit_duration, y = residual, group = StudyID)) +
geom_line(col = "gray", size = 0.3) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_point(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.min(df_sample$brms.Slope)]),], size = 1, col = '#56B4E9') + geom_line(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.min(df_sample$brms.Slope)]),], aes(x = visit_duration, y = residual, colour = "Trajectory"), size = 0.5) + geom_line(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.min(df_sample$AveResidual)]),], aes(x = visit_duration, y = residual, colour = "Average ACR"), size = 0.5)+ geom_point(data = df_sample[which(df_sample$StudyID==lowest_latest),], size = 1, col = '#E69F00') + geom_line(data = df_sample[which(df_sample$StudyID==lowest_latest),], aes(x = visit_duration, y = residual, colour = "Latest ACR"), size = 0.5)+ scale_colour_manual(name="Phenotype",values=cols)+ geom_point(data = df_sample[which(df_sample$StudyID == df_sample$StudyID[which.min(df_sample$AveResidual)]),], size = 1, col = '#CC79A7')+
xlab("Duration of diabetes")+
ylab("ACR (covariate adjusted)") + theme(axis.text= element_text(size=8), axis.title = element_text(size=10))+
theme(strip.text.x = element_blank(),
strip.background = element_rect(colour="white", fill="white"),
legend.position=c(.65,.9),
legend.title = element_text(size = 7),
legend.text  = element_text(size = 6),
legend.key.size = unit(0.6, "lines"),
legend.spacing.x = unit(0.2, 'cm')
) +
guides(shape = guide_legend(override.aes = list(size = 0.5)),
color = guide_legend(override.aes = list(size = 0.5)))
p = plot_grid(one+theme(legend.position = "none"), two, nrow = 1, labels = c("A","B"))
ggsave_halfheight("comparing-phenotypes.png", p )
traj_res
latestACR_res
averes_res
averes_res <- readRDS("averes results/final-pooled-res.RDS")
library(GenomicRanges)
library(karyoploteR)
library(data.table)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
#traj_res_sample <- traj_res[sample(1:nrow(traj_res), 10000)]
traj_res_sample <- traj_res
traj_res_sample[ , chr := paste0('chr', chr)]
traj_res_sample$CHR19[which(traj_res_sample$CHR19=="chr23")] <- "chrX"
colnames(traj_res_sample)[c(1,2,9)] <- c("CHR19","BP19","P")
trajGRanges <- makeGRangesFromDataFrame(data.frame(traj_res_sample), start.field = 'BP19', end.field = 'BP19', seqnames.field = 'CHR19', ignore.strand = T, keep.extra.columns = T)
#averes_res_sample <- averes_res[sample(1:nrow(averes_res), 10000)]
averes_res_sample <- averes_res
averes_res_sample[ , chr := paste0('chr', chr)]
colnames(averes_res_sample)[c(1,2,9)] <- c("CHR19","BP19","P")
averes_res_sample$CHR19[which(averes_res_sample$CHR19=="chr23")] <- "chrX"
averesGRanges <- makeGRangesFromDataFrame(data.frame(averes_res_sample), start.field = 'BP19', end.field = 'BP19', seqnames.field = 'CHR19', ignore.strand = T, keep.extra.columns = T)
#latestACR_res_sample <- latestACR_res[sample(1:nrow(latestACR_res), 10000)]
latestACR_res_sample <- latestACR_res
latestACR_res_sample[ , chr := paste0('chr', chr)]
colnames(latestACR_res_sample)[c(1,2,9)] <- c("CHR19","BP19","P")
latestACR_res_sample$CHR19[which(latestACR_res_sample$CHR19=="chr23")] <- "chrX"
latestACRGRanges <- makeGRangesFromDataFrame(data.frame(latestACR_res_sample), start.field = 'BP19', end.field = 'BP19', seqnames.field = 'CHR19', ignore.strand = T, keep.extra.columns = T)
png("fullresults.png", width = 700, height = 800)
cex.label <- 1
ymax <- 10
label.margin <- 0.05
# The % of the total plotting space to leave in each margin between the tracks
autotrack.margin <- 0.18
pp <- getDefaultPlotParams(plot.type=4)
pp$leftmargin <- 0.1
#kp <- plotKaryotype(genome = "hg19", plot.type = 4, labels.plotter = NULL, plot.params = getDefaultPlotParams(plot.type=4), chromosomes = c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX"))
kp <- plotKaryotype(genome = "hg19", plot.type = 4, labels.plotter = NULL, plot.params = pp, chromosomes = c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX"))
kpAddChromosomeNames(kp, col = 'black', srt = 90, cex = 1)
title(main = 'GWAS results', cex.main = 1.3)
# Note that the last keyword argument, which specifies that this plot should occupy position 1 of 4
# kpPlotManhattan will look for a column labelled 'p' or 'P' in the GenomicRanges object, but you can specify it explicitly by passing it as a vector to the 'pval' argument
# Note the points.col argument; I recommend brewer.set3 when looking at the whole genome because the points from different chromosomes will be coloured distinctly, although we can't see that here as I have data from only one chromosome
at<-autotrack(3, 3, margin = autotrack.margin)
kp <- kpPlotManhattan(kp, data = trajGRanges, pval = trajGRanges$P, points.col  =  'brewer.set3', r0 = at$r0, r1 = at$r1, ymax = ymax, points.cex=0.5, suggestiveline = -log10(1e-06))
kpAddLabels(kp, labels  =  'Trajectory', srt = 90, pos = 3, r0 = at$r0, r1 = at$r1, cex = cex.label, label.margin = label.margin)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = at$r0, r1 = at$r1)
at<-autotrack(2, 3, margin = autotrack.margin)
kp <- kpPlotManhattan(kp, data = averesGRanges, points.col  =  'brewer.set3', r0 = at$r0, r1 = at$r1, ymax = ymax, points.cex=0.5, suggestiveline = -log10(1e-06))
kpAddLabels(kp, labels  =  'Average ACR', srt = 90, pos = 3, r0 = at$r0, r1 = at$r1, cex = cex.label, label.margin = label.margin)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = at$r0, r1 = at$r1)
at<-autotrack(1, 3, margin = autotrack.margin)
kp <- kpPlotManhattan(kp, data = latestACRGRanges, points.col  =  'brewer.set3', r0 = at$r0, r1 = at$r1, ymax = ymax, points.cex=0.5, suggestiveline = -log10(1e-06))
kpAddLabels(kp, labels  =  'Latest ACR', srt = 90, pos = 3, r0 = at$r0, r1 = at$r1, cex = cex.label, label.margin = label.margin)
kpAxis(kp, ymin = 0, ymax = ymax, r0 = at$r0, r1 = at$r1)
dev.off()
latestACR_res
[which(latestACR_res$ps==20409042),]
latestACR_res[which(latestACR_res$ps==20409042),]
averes_res[which(averes_res$ps==20409042),]
0.3073208/0.5567453
0.07546775/0.5567453
setwd("~/Google Drive/PhD/R_packages/fcfdr")
x <- readRDS("data/T1D_application_data.RData")
x <-load("data/T1D_application_data.RData")
T1D_application_data.RData
T1D_application_data
T1D_df <- T1D_application_data[1:100,]
T1D_df
save(T1D_df, "T1D_df.RData")
save("T1D_df.RData", T1D_df)
save(file = "T1D_df.RData", T1D_df)
rm(list=ls())
load("T1D_df.RData")
T1D_df
library(fcfdr)
test_that("flexible_cfdr runs on a smaller version of the vignette data", {
set.seed(1)
n <- 5000
n1p <- 50
zp <- c(rnorm(n1p, sd=5), rnorm(n-n1p, sd=1))
p <- 2*pnorm(-abs(zp))
mixture_comp1 <- function(x) rnorm(x, mean = -0.5, sd = 0.5)
mixture_comp2 <- function(x) rnorm(x, mean = 2, sd = 1)
n <- length(p)
z <- runif(n)
q <- c(mixture_comp1(n1p), mixture_comp2(n-n1p))
res <- flexible_cfdr(p, q, indep_index = seq(1, n, 1))
expect_equal(digest::digest(res),"b6f8cdd80fb1bdbc4e315a827698d3b9")
})
library(devtools)
test_that("flexible_cfdr runs on a smaller version of the vignette data", {
set.seed(1)
n <- 5000
n1p <- 50
zp <- c(rnorm(n1p, sd=5), rnorm(n-n1p, sd=1))
p <- 2*pnorm(-abs(zp))
mixture_comp1 <- function(x) rnorm(x, mean = -0.5, sd = 0.5)
mixture_comp2 <- function(x) rnorm(x, mean = 2, sd = 1)
n <- length(p)
z <- runif(n)
q <- c(mixture_comp1(n1p), mixture_comp2(n-n1p))
res <- flexible_cfdr(p, q, indep_index = seq(1, n, 1))
expect_equal(digest::digest(res),"b6f8cdd80fb1bdbc4e315a827698d3b9")
})
??test_that
library(testthat)
test_that("flexible_cfdr runs on a smaller version of the vignette data", {
set.seed(1)
n <- 5000
n1p <- 50
zp <- c(rnorm(n1p, sd=5), rnorm(n-n1p, sd=1))
p <- 2*pnorm(-abs(zp))
mixture_comp1 <- function(x) rnorm(x, mean = -0.5, sd = 0.5)
mixture_comp2 <- function(x) rnorm(x, mean = 2, sd = 1)
n <- length(p)
z <- runif(n)
q <- c(mixture_comp1(n1p), mixture_comp2(n-n1p))
res <- flexible_cfdr(p, q, indep_index = seq(1, n, 1))
expect_equal(digest::digest(res),"b6f8cdd80fb1bdbc4e315a827698d3b9")
})
test_that("flexible_cfdr runs on subset of package sample data when matching MAF and using RA p-value as the auxiliary covariate", {
load(file=system.file('data', 'T1D_df.RData', package='fcfdr', mustWork = T))
set.seed(42)
res <- flexible_cfdr(T1D_df$p, q = -qnorm(T1D_df$RA_p/2), indep_index = which(T1D_df$ldak_weight != 0), maf = T1D_df$maf, check_indep_cor = FALSE, enforce_p_q_cor = FALSE)
expect_equal(digest::digest(res), "f07705b80f5fc87fbed00872158046ad")
})
flexible_cfdr(T1D_df$p, q = -qnorm(T1D_df$RA_p/2), indep_index = which(T1D_df$ldak_weight != 0), maf = T1D_df$maf, check_indep_cor = FALSE, enforce_p_q_cor = FALSE)
T1D_df
head(T1D_df)
flexible_cfdr(T1D_df$T1D_pval, q = -qnorm(T1D_df$RA_pval/2), indep_index = which(T1D_df$LDAK_weight != 0), maf = T1D_df$MAF, check_indep_cor = FALSE, enforce_p_q_cor = FALSE)
T1D_df <- T1D_application_data[1:500,]
flexible_cfdr(T1D_df$T1D_pval, q = -qnorm(T1D_df$RA_pval/2), indep_index = which(T1D_df$LDAK_weight != 0), maf = T1D_df$MAF, check_indep_cor = FALSE, enforce_p_q_cor = FALSE)
T1D_df
match_ind_maf(maf = T1D_df$MAF, indep_index = which(T1D_df$LDAK_weight != 0))
fcfdr::match_ind_maf(maf = T1D_df$MAF, indep_index = which(T1D_df$LDAK_weight != 0))
fcfdr:::match_ind_maf(maf = T1D_df$MAF, indep_index = which(T1D_df$LDAK_weight != 0))
T1D_df <- na.omit(T1D_df)
T1D_df
fcfdr:::match_ind_maf(maf = T1D_df$MAF, indep_index = which(T1D_df$LDAK_weight != 0))
T1D_df$MAF
which(T1D_df$LDAK_weight != 0)
maf <- T1D_df$MAF
indep_index = which(T1D_df$LDAK_weight != 0)
breaks <- seq(0, 0.5, length=51)
daf <- data.frame(indep_index = indep_index, maf = maf[indep_index])
maf_interval <- as.character(cut(maf, breaks = breaks, include.lowest = T))
daf$maf_interval <- maf_interval[indep_index]
maf_interval_freq.whole <- table(maf_interval)
maf_interval_freq.ind <- table(daf$maf_interval)
maf_interval_freq.whole.relative <- maf_interval_freq.whole/sum(maf_interval_freq.whole)
maf_interval_freq.ind.relative <- maf_interval_freq.ind/sum(maf_interval_freq.ind)
max_sample_size <- floor(min(maf_interval_freq.ind/maf_interval_freq.whole.relative))
min(maf_interval_freq.ind/maf_interval_freq.whole.relative)
maf_interval_freq.ind
maf_interval_freq.whole.relative
daf
class(maf_interval_freq.whole)
class(sum(maf_interval_freq.whole))
maf_interval_freq.whole.relative
class(maf_interval_freq.ind)
class(sum(maf_interval_freq.ind))
maf_interval_freq.ind.relative
class(maf_interval_freq.ind)
class(maf_interval_freq.whole.relative)
maf_interval_freq.ind/maf_interval_freq.whole.relative
maf_interval_freq.ind
length(maf_interval_freq.ind)
length(maf_interval_freq.whole.relative)
T1D_df
flexible_cfdr(T1D_df$p, q = -qnorm(T1D_df$RA_p/2), indep_index = which(T1D_df$ldak_weight != 0), maf = NULL, check_indep_cor = FALSE, enforce_p_q_cor = FALSE)
flexible_cfdr(T1D_df$T1D_pval, q = -qnorm(T1D_df$RA_pval/2), indep_index = which(T1D_df$LDAK_weight != 0), maf = NULL, check_indep_cor = FALSE, enforce_p_q_cor = FALSE)
save(T1D_df, file = "T1D_df.RData")
T1D_df
getwd()
