for (i in 1:length(example_indices)) lines(vx$x[i,],vx$y);
for (i in 1:length(example_indices)) points(p[example_indices[i]],q[example_indices [i]],pch=16,col="blue")
set.seed(1)                                           # ensure reproducibility
n=10000; n1p=100; n1pq=100; n1q=100                   # parameters
zp=c(rnorm(n1p,sd=3), rnorm(n1q,sd=1),
rnorm(n1pq,sd=3), rnorm(n-n1p-n1q-n1pq,sd=1))    # simulate z-scores corresponding to p
zq=c(rnorm(n1p,sd=1), rnorm(n1q,sd=3),
rnorm(n1pq,sd=3), rnorm(n-n1p-n1q-n1pq,sd=1))    # simulate z-scores corresponding to q
p=2*pnorm(-abs(zp)); q=2*pnorm(-abs(zq))              # convert to p-values
candidate_indices=which(p<0.01 | q< 0.001)
est_q0_pars=fit.2g(q[which(p>0.5)])$pars
library(cfdr)
est_q0_pars=fit.2g(q[which(p>0.5)])$pars
est_q0_pars
library(cfdr)
set.seed(1)                                           # ensure reproducibility
new_sd <- 5
n=1000; n1p=50; n1pq=50; n1q=50                   # parameters
par(mfrow = c(1,2))
zp=c(rnorm(n1p,sd=new_sd), rnorm(n1q,sd=1),
rnorm(n1pq,sd=new_sd), rnorm(n-n1p-n1q-n1pq,sd=1))    # simulate z-scores corresponding to p
zq=c(rnorm(n1p,sd=1), rnorm(n1q,sd=3),
rnorm(n1pq,sd=3), rnorm(n-n1p-n1q-n1pq,sd=1))    # simulate z-scores corresponding to q
P=2*pnorm(-abs(zp)); Q=2*pnorm(-abs(zq))              # convert to p-values
rough_cfdr=function(p,q) p*length(which(Q <= Q))/length(which(P <= p & Q <= q))
plot(p, rough_cfdr)
plot(P, rough_cfdr)
plot(P, rough_cfdr(P,Q))
identical(P, rough_cfdr(P,Q))
identical(-log10(P), -log10(rough_cfdr(P,Q)))
identical(-log10(P), -log10(rough_cfdr(P,Q)))
plot(-log10(P), -log10(rough_cfdr(P,Q)))
packages <- c(
'ggplot2',
'ggrepel',
'patchwork',
'ggraph',
'dplyr',
'patchwork',
'gganimate',
'gifski',
'ggrepel',
'ggforce',
'ggraph',
'ggthemes',
'maps',
'sf',
'tidyr',
'concaveman',
'remotes'
)
data("faithful")
# Basic scatterplot
ggplot(data = faithful,
mapping = aes(x = eruptions, y = waiting)) +
geom_point()
# Data and mapping can be given both as global (in ggplot()) or per layer
ggplot() +
geom_point(mapping = aes(x = eruptions, y = waiting),
data = faithful)
head(faithful)
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting, colour = eruptions < 3))
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting),
colour = 'steelblue')
ggplot(faithful) +
geom_histogram(aes(x = eruptions))
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_density_2d() +
geom_point()
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting), alpha = 0.1, size = 2)
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting), alpha = 0.1, size = 5)
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting, alpha = 0.1))
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting, size = 5))
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting), alpha = 0.1, size = 2)
ggplot(faithful) +
geom_histogram(aes(x = eruptions))
ggplot(faithful) +
geom_histogram(aes(x = eruptions, col = eruptions >3))
ggplot(faithful) +
geom_histogram(aes(x = eruptions, fill = eruptions >3))
ggplot(faithful) +
geom_histogram(aes(x = eruptions, fill =
waiting > 60))
ggplot(faithful) +
geom_histogram(aes(x = eruptions, fill =
waiting > 60), position = 'dodge')
ggplot(faithful) +
geom_histogram(aes(x = eruptions, fill =
waiting > 60, position = 'dodge'))
ggplot(faithful) +
geom_histogram(aes(x = eruptions, fill =
waiting > 60), position = 'dodge')
ggplot(faithful) +
geom_histogram(aes(x = eruptions, fill =
waiting > 60), position = "dodge")
?ggplot2::position_dodge
ggplot(faithful) +
geom_histogram(aes(x = eruptions, fill = eruptions >3))
ggplot(faithful) +
geom_histogram(aes(x = eruptions, fill =
waiting > 60), position = "dodge")
ggplot(faithful) +
geom_histogram(aes(x = eruptions, fill =
waiting > 60), position = "dodge2")
ggplot(faithful) +
geom_histogram(aes(x = eruptions, fill =
waiting > 60), position = "dodge2")
data("mpg")
ggplot(mpg) +
geom_bar(aes(x = class))
library(dplyr)
mpg_counted <- mpg %>%
count(class, name = 'count')
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = count), stat = 'identity')
head(mpg)
head(mpg_counted)
vlibrary(dplyr)
mpg_counted <- mpg %>%
count(class, name = 'count')
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = count), stat = 'identity'
library(dplyr)
mpg_counted <- mpg %>%
count(class, name = 'count')
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = count), stat = 'identity'))
library(dplyr)
mpg_counted <- mpg %>%
count(class, name = 'count')
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = count), stat = 'identity')
ggplot(mpg_counted) +
geom_col(aes(x = class, y = count))
ggplot(mpg_counted) +
geom_col(aes(x = class, y = count))
ggplot(mpg) +
geom_bar(aes(x = class, y = after_stat(100 * count / sum(count))))
ggplot(mpg) +
geom_density(aes(x = hwy))
ggplot(mpg) +
geom_density(aes(x = hwy, y = after_stat(scaled)))
x <- runif(0,1)
range(x)
x
x <- runif(100,0,1)
range(x)
y <- runif(100,0,1)
cor(x,y)
plot(x,y)
nsnps = 100
annot_c = rnorm(100)
ld = matrix(rnorm(1000, 0.4, 0.0001), nrow = 100)
max(ld)
min(ld)
ld = matrix(rnorm(1000, 0.4, 0.01), nrow = 100)
max(ld)
min(ld)
ld = matrix(rnorm(1000, 0.4, 0.1), nrow = 100)
max(ld)
min(ld)
dim(ld)
ld = matrix(rnorm(10000, 0.4, 0.1), nrow = 100)
max(ld)
dim(ld)
annot_c * ld
dim(annot_c * ld)
dim(annot_c %*% ld)
annot_c %*% ld
l = annot_c %*% ld
l
sum(annot_c * ld)
sum(annot_c * ld[1,])
sum(annot_c * ld[,1])
chisq = rnorm(nsnps, 3, 1)
range(chisq)
annot_c = rnorm(nsnps)
ld = matrix(rnorm(nsnps*nsnps, 0.4, 0.1), nrow = 100)
max(ld)
dim(ld)
ld %*% annot_c
l = ld %*% annot_c
sum(annot_c * ld[1,])
lm(chisq ~ l)
summary(lm(chisq ~ l))
weight <- sample(c(0.5,0.6,0.7,0.8,0.9),1)
weight
weight <- sample(c(0.5,0.6,0.7,0.8,0.9),1)
weight
rm(list=ls())
rm(list=ls())
setwd("~/Google Drive/PhD/R_packages/fcfdr")
setwd("~/Google Drive/PhD/cFDR_appnote")
library(dplyr)
library(ggplot2)
library(cowplot)
res <- readRDS("cfdr_res.RDS")
df_plot <- data.frame(P= c(p.adjust(res$p, method = "BH"), p.adjust(res$v3, method = "BH")), BP = c(res$pos, res$pos), CHR = c(res$chrom, res$chrom), groups = rep(c("Before","After"), each = nrow(res)))
fdr_thr <- max(p.adjust(res$p, method = "BH")[which(res$p<=5*10^-8)])
nCHR <- length(unique(df_plot$CHR))
df_plot$BPcum <- NA
s <- 0
nbp <- c()
for (i in unique(df_plot$CHR)){
nbp[i] <- max(df_plot[df_plot$CHR == i,]$BP)
df_plot[df_plot$CHR == i,"BPcum"] <- df_plot[df_plot$CHR == i,"BP"] + s
s <- s + nbp[i]
}
axis.set <- df_plot %>%
group_by(CHR) %>%
summarize(center = (max(BPcum) + min(BPcum)) / 2)
df_plot$groups <- as.factor(df_plot$groups)
new_snps <- which(p.adjust(res$p, method = "BH")>fdr_thr & p.adjust(res$v3, method = "BH")<=fdr_thr)
one <- ggplot(df_plot[which(df_plot$groups=="Before"),], aes(x = BPcum, y = -log10(P), col = as.factor(CHR))) + geom_point(alpha = 0.75, cex = 0.75) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_hline(yintercept = -log10(fdr_thr), linetype = "dashed") + xlab("Position") + ylab("-log10 FDR") +  scale_color_manual(values = rep(c("#276FBF", "#183059"), nCHR)) +
scale_x_continuous(label = axis.set$CHR, breaks = axis.set$center) + geom_point(data = df_plot[new_snps,], aes(x = BPcum, y = -log10(P)), col = "red", size = 2)+ theme(legend.position = "none")+ theme(axis.text = element_text(size = 8)) + coord_cartesian(ylim = c(0,50))
one + coord_cartesian(ylim = c(0,10))
getwd()
cab <- readPNG("/hex_sticker/hex.png")
setwd("~/Google Drive/PhD/manuscripts/cfdr_final")
cab <- readPNG("/hex_sticker/hex.png")
library(png)
library(hexSticker)
cab <- readPNG("/hex_sticker/hex.png")
cab <- readPNG("hex_sticker/hex.png")
getwd()
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.3, s_height=1.5,
h_fill = "black", h_color = "violetred1",
filename="hexsticker/test.png")
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.3, s_height=1.5,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.3, s_height=1.5,
h_fill = "black", h_color = "#183059",
filename="hexsticker/test.png")
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1.2, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.3, s_height=1.5,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
cab <- rasterGrob(cab, width = 1.2, x = 0.5, y = 0.5,
interpolate = FALSE)
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1.2, x = 0.5, y = 0.5,
interpolate = TRUE)
cab
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.3, s_height=1.5,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
gg
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
gg
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.3, s_height=1.5,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
gg
devtools::install_github("r-lib/svglite")
install.packages("svglite")
library(svglite)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
gg
one <- ggplot(df_plot[which(df_plot$groups=="Before"),], aes(x = BPcum, y = -log10(P), col = as.factor(CHR))) + geom_point(alpha = 0.75, cex = 0.75) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_hline(yintercept = -log10(fdr_thr), linetype = "dashed") + xlab("Position") + ylab("-log10 FDR") +  scale_color_manual(values = rep(c("#276FBF", "#183059"), nCHR)) +
scale_x_continuous(label = axis.set$CHR, breaks = axis.set$center) + geom_point(data = df_plot[new_snps,], aes(x = BPcum, y = -log10(P)), col = "red", size = 2)+ theme(legend.position = "none")+ theme(axis.text = element_text(size = 8)) + coord_cartesian(ylim = c(0,50))
one+coord_cartesian(ylim = c(0,10))
library(png)
library(hexSticker)
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.9, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
gg
hex = sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
png(
filename = "sticker.png",
width = 43.9,
height = 50.8,
bg = "transparent",
units = "mm",
type = "cairo-png",
antialias = "subpixel",
res = 300
)
print(hex)
dev.off()
head(res)
res <- res[which(res$chrom %in% c(1,2,3,4,5,6))]
res <- res[which(res$chrom %in% c(1,2,3,4,5,6)),]
df_plot <- data.frame(P= c(p.adjust(res$p, method = "BH"), p.adjust(res$v3, method = "BH")), BP = c(res$pos, res$pos), CHR = c(res$chrom, res$chrom), groups = rep(c("Before","After"), each = nrow(res)))
fdr_thr <- max(p.adjust(res$p, method = "BH")[which(res$p<=5*10^-8)])
nCHR <- length(unique(df_plot$CHR))
df_plot$BPcum <- NA
s <- 0
nbp <- c()
for (i in unique(df_plot$CHR)){
nbp[i] <- max(df_plot[df_plot$CHR == i,]$BP)
df_plot[df_plot$CHR == i,"BPcum"] <- df_plot[df_plot$CHR == i,"BP"] + s
s <- s + nbp[i]
}
axis.set <- df_plot %>%
group_by(CHR) %>%
summarize(center = (max(BPcum) + min(BPcum)) / 2)
df_plot$groups <- as.factor(df_plot$groups)
new_snps <- which(p.adjust(res$p, method = "BH")>fdr_thr & p.adjust(res$v3, method = "BH")<=fdr_thr)
one <- ggplot(df_plot[which(df_plot$groups=="Before"),], aes(x = BPcum, y = -log10(P), col = as.factor(CHR))) + geom_point(alpha = 0.75, cex = 0.75) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_hline(yintercept = -log10(fdr_thr), linetype = "dashed") + xlab("Position") + ylab("-log10 FDR") +  scale_color_manual(values = rep(c("#276FBF", "#183059"), nCHR)) +
scale_x_continuous(label = axis.set$CHR, breaks = axis.set$center) + geom_point(data = df_plot[new_snps,], aes(x = BPcum, y = -log10(P)), col = "red", size = 2)+ theme(legend.position = "none")+ theme(axis.text = element_text(size = 8)) + coord_cartesian(ylim = c(0,10))
one
one <- ggplot(df_plot[which(df_plot$groups=="Before"),], aes(x = BPcum, y = -log10(P), col = as.factor(CHR))) + geom_point(alpha = 0.75, cex = 0.75) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_hline(yintercept = -log10(fdr_thr), linetype = "dashed") + xlab("Position") + ylab("-log10 FDR") +  scale_color_manual(values = rep(c("#276FBF", "#183059"), nCHR)) +
scale_x_continuous(label = axis.set$CHR, breaks = axis.set$center)+ theme(legend.position = "none")+ theme(axis.text = element_text(size = 8)) + coord_cartesian(ylim = c(0,10))
one
one <- ggplot(df_plot[which(df_plot$groups=="Before"),], aes(x = BPcum, y = -log10(P), col = as.factor(CHR))) + geom_point(alpha = 1, cex = 1) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_hline(yintercept = -log10(fdr_thr), linetype = "dashed") + xlab("Position") + ylab("-log10 FDR") +  scale_color_manual(values = rep(c("#276FBF", "#183059"), nCHR)) +
scale_x_continuous(label = axis.set$CHR, breaks = axis.set$center)+ theme(legend.position = "none")+ theme(axis.text = element_text(size = 8)) + coord_cartesian(ylim = c(0,10))
one
one <- ggplot(df_plot[which(df_plot$groups=="Before"),], aes(x = BPcum, y = -log10(P), col = as.factor(CHR))) + geom_point(alpha = 1, cex = 2) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_hline(yintercept = -log10(fdr_thr), linetype = "dashed") + xlab("Position") + ylab("-log10 FDR") +  scale_color_manual(values = rep(c("#276FBF", "#183059"), nCHR)) +
scale_x_continuous(label = axis.set$CHR, breaks = axis.set$center)+ theme(legend.position = "none")+ theme(axis.text = element_text(size = 8)) + coord_cartesian(ylim = c(0,10))
one
library(png)
library(hexSticker)
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
hex = sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
png(
filename = "sticker.png",
width = 43.9,
height = 50.8,
bg = "transparent",
units = "mm",
type = "cairo-png",
antialias = "subpixel",
res = 300
)
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
cab <- rasterGrob(cab,
x = 0.5, y = 0.5,
interpolate = TRUE)
cab <- rasterGrob(cab,x = 0.5, y = 0.5,
interpolate = TRUE)
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
gg
library(png)
library(hexSticker)
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
dev.off()
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
gg
cab
plot(cab)
grid.raster(cab)
svglite::svglite('hexsticker/hex.png', width=4, height=4)
print(ggplot2::qplot(1:1000) + ggplot2::annotation_custom(grob))
print(ggplot() + ggplot2::annotation_custom(grob))
print(ggplot() + ggplot2::annotation_custom(cab))
gg
grDevices::dev.off()
gg
head(res)
log10pv_plot <- function(output, axis_lim = c(min(-log10(output[[1]]$p), max(-log10(output[[1]]$p))))){
df <- output[[1]]
mid <- median(df$q)
ggplot(df, aes(x = -log10(p), y = -log10(v), col = q)) + geom_point() + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_abline(intercept = 0, slope = 1,  linetype="dashed") + xlab("raw p-values (-log10)") + ylab("v-values (-log10)") + ggtitle(paste0("Flexible cFDR results")) + scale_color_gradient2(midpoint = mid, low = "blue", mid = "white", high = "red", space = "Lab") + coord_cartesian(ylim = axis_lim, xlim = axis_lim)
}
output <- list(res, 1)
ouput
str(output)
output <- list(data.frame(p = res$p, v = res$v1, q = res$q1), 1)
output <- list(res, 1)
output <- list(data.frame(p = res$p, v = res$v1, q = res$q1), 1)
str(output)
log10pv_plot(output)
min(-log10(output[[1]]$p)
)
getwd()
setwd("~/Google Drive/PhD/cFDR_appnote")
x <- readRDS("T1D_application_data.RDS")
df <- x
df
save(df, "T1D.RData")
save(df, file = "T1D.RData")
=======
load_all()
library(devtool)
library(devtools)
load_all()
load_all()
check()
check()
use_mit_license()
use_mit_license(Anna Hutcinson)
check()
check()
check()
check()
check()
usethis::use_vignette("fcfdr-vignette")
load(fcfdr)
load_all()
document()
build_vignettes()
load_all()
build_vignettes()
.Last.error.trace
library(fcfdr)
set.seed(1)
n = 50000
n1p = 500 # associated variants
zp = c(rnorm(n1p, sd=5), rnorm(n-n1p, sd=1)) # z-scores
p = 2*pnorm(-abs(zp)) # convert to p-values
mixture_comp1 <- function(x) rnorm(x, mean = -0.5, sd = 0.5)
mixture_comp2 <- function(x) rnorm(x, mean = 2, sd = 1)
n = length(p)
z = runif(n)
q <- c(mixture_comp1(n1p), mixture_comp2(n-n1p))
hist(q)
corr_plot(p, q)
res <- flexible_cfdr(p, q, indep_index = seq(1, n, 1), rmseg = TRUE)
build_vignettes()
document()
library(fcfdr)
build_vignettes()
check()
library(devtools)
build_readme()
use_readme_rmd(open = rlang::is_interactive())
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
>>>>>>> 9f4d11885d8c88bf477fe8dd9ee1195da98da514
