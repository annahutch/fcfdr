chisq = rnorm(nsnps, 3, 1)
range(chisq)
annot_c = rnorm(nsnps)
ld = matrix(rnorm(nsnps*nsnps, 0.4, 0.1), nrow = 100)
max(ld)
dim(ld)
ld %*% annot_c
l = ld %*% annot_c
sum(annot_c * ld[1,])
lm(chisq ~ l)
summary(lm(chisq ~ l))
weight <- sample(c(0.5,0.6,0.7,0.8,0.9),1)
weight
weight <- sample(c(0.5,0.6,0.7,0.8,0.9),1)
weight
rm(list=ls())
rm(list=ls())
setwd("~/Google Drive/PhD/R_packages/fcfdr")
setwd("~/Google Drive/PhD/cFDR_appnote")
library(dplyr)
library(ggplot2)
library(cowplot)
res <- readRDS("cfdr_res.RDS")
df_plot <- data.frame(P= c(p.adjust(res$p, method = "BH"), p.adjust(res$v3, method = "BH")), BP = c(res$pos, res$pos), CHR = c(res$chrom, res$chrom), groups = rep(c("Before","After"), each = nrow(res)))
fdr_thr <- max(p.adjust(res$p, method = "BH")[which(res$p<=5*10^-8)])
nCHR <- length(unique(df_plot$CHR))
df_plot$BPcum <- NA
s <- 0
nbp <- c()
for (i in unique(df_plot$CHR)){
nbp[i] <- max(df_plot[df_plot$CHR == i,]$BP)
df_plot[df_plot$CHR == i,"BPcum"] <- df_plot[df_plot$CHR == i,"BP"] + s
s <- s + nbp[i]
}
axis.set <- df_plot %>%
group_by(CHR) %>%
summarize(center = (max(BPcum) + min(BPcum)) / 2)
df_plot$groups <- as.factor(df_plot$groups)
new_snps <- which(p.adjust(res$p, method = "BH")>fdr_thr & p.adjust(res$v3, method = "BH")<=fdr_thr)
one <- ggplot(df_plot[which(df_plot$groups=="Before"),], aes(x = BPcum, y = -log10(P), col = as.factor(CHR))) + geom_point(alpha = 0.75, cex = 0.75) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_hline(yintercept = -log10(fdr_thr), linetype = "dashed") + xlab("Position") + ylab("-log10 FDR") +  scale_color_manual(values = rep(c("#276FBF", "#183059"), nCHR)) +
scale_x_continuous(label = axis.set$CHR, breaks = axis.set$center) + geom_point(data = df_plot[new_snps,], aes(x = BPcum, y = -log10(P)), col = "red", size = 2)+ theme(legend.position = "none")+ theme(axis.text = element_text(size = 8)) + coord_cartesian(ylim = c(0,50))
one + coord_cartesian(ylim = c(0,10))
getwd()
cab <- readPNG("/hex_sticker/hex.png")
setwd("~/Google Drive/PhD/manuscripts/cfdr_final")
cab <- readPNG("/hex_sticker/hex.png")
library(png)
library(hexSticker)
cab <- readPNG("/hex_sticker/hex.png")
cab <- readPNG("hex_sticker/hex.png")
getwd()
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.3, s_height=1.5,
h_fill = "black", h_color = "violetred1",
filename="hexsticker/test.png")
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.3, s_height=1.5,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.3, s_height=1.5,
h_fill = "black", h_color = "#183059",
filename="hexsticker/test.png")
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1.2, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.3, s_height=1.5,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
cab <- rasterGrob(cab, width = 1.2, x = 0.5, y = 0.5,
interpolate = FALSE)
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1.2, x = 0.5, y = 0.5,
interpolate = TRUE)
cab
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.3, s_height=1.5,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
gg
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
gg
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.3, s_height=1.5,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
gg
devtools::install_github("r-lib/svglite")
install.packages("svglite")
library(svglite)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
gg
one <- ggplot(df_plot[which(df_plot$groups=="Before"),], aes(x = BPcum, y = -log10(P), col = as.factor(CHR))) + geom_point(alpha = 0.75, cex = 0.75) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_hline(yintercept = -log10(fdr_thr), linetype = "dashed") + xlab("Position") + ylab("-log10 FDR") +  scale_color_manual(values = rep(c("#276FBF", "#183059"), nCHR)) +
scale_x_continuous(label = axis.set$CHR, breaks = axis.set$center) + geom_point(data = df_plot[new_snps,], aes(x = BPcum, y = -log10(P)), col = "red", size = 2)+ theme(legend.position = "none")+ theme(axis.text = element_text(size = 8)) + coord_cartesian(ylim = c(0,50))
one+coord_cartesian(ylim = c(0,10))
library(png)
library(hexSticker)
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.9, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
gg
hex = sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
png(
filename = "sticker.png",
width = 43.9,
height = 50.8,
bg = "transparent",
units = "mm",
type = "cairo-png",
antialias = "subpixel",
res = 300
)
print(hex)
dev.off()
head(res)
res <- res[which(res$chrom %in% c(1,2,3,4,5,6))]
res <- res[which(res$chrom %in% c(1,2,3,4,5,6)),]
df_plot <- data.frame(P= c(p.adjust(res$p, method = "BH"), p.adjust(res$v3, method = "BH")), BP = c(res$pos, res$pos), CHR = c(res$chrom, res$chrom), groups = rep(c("Before","After"), each = nrow(res)))
fdr_thr <- max(p.adjust(res$p, method = "BH")[which(res$p<=5*10^-8)])
nCHR <- length(unique(df_plot$CHR))
df_plot$BPcum <- NA
s <- 0
nbp <- c()
for (i in unique(df_plot$CHR)){
nbp[i] <- max(df_plot[df_plot$CHR == i,]$BP)
df_plot[df_plot$CHR == i,"BPcum"] <- df_plot[df_plot$CHR == i,"BP"] + s
s <- s + nbp[i]
}
axis.set <- df_plot %>%
group_by(CHR) %>%
summarize(center = (max(BPcum) + min(BPcum)) / 2)
df_plot$groups <- as.factor(df_plot$groups)
new_snps <- which(p.adjust(res$p, method = "BH")>fdr_thr & p.adjust(res$v3, method = "BH")<=fdr_thr)
one <- ggplot(df_plot[which(df_plot$groups=="Before"),], aes(x = BPcum, y = -log10(P), col = as.factor(CHR))) + geom_point(alpha = 0.75, cex = 0.75) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_hline(yintercept = -log10(fdr_thr), linetype = "dashed") + xlab("Position") + ylab("-log10 FDR") +  scale_color_manual(values = rep(c("#276FBF", "#183059"), nCHR)) +
scale_x_continuous(label = axis.set$CHR, breaks = axis.set$center) + geom_point(data = df_plot[new_snps,], aes(x = BPcum, y = -log10(P)), col = "red", size = 2)+ theme(legend.position = "none")+ theme(axis.text = element_text(size = 8)) + coord_cartesian(ylim = c(0,10))
one
one <- ggplot(df_plot[which(df_plot$groups=="Before"),], aes(x = BPcum, y = -log10(P), col = as.factor(CHR))) + geom_point(alpha = 0.75, cex = 0.75) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_hline(yintercept = -log10(fdr_thr), linetype = "dashed") + xlab("Position") + ylab("-log10 FDR") +  scale_color_manual(values = rep(c("#276FBF", "#183059"), nCHR)) +
scale_x_continuous(label = axis.set$CHR, breaks = axis.set$center)+ theme(legend.position = "none")+ theme(axis.text = element_text(size = 8)) + coord_cartesian(ylim = c(0,10))
one
one <- ggplot(df_plot[which(df_plot$groups=="Before"),], aes(x = BPcum, y = -log10(P), col = as.factor(CHR))) + geom_point(alpha = 1, cex = 1) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_hline(yintercept = -log10(fdr_thr), linetype = "dashed") + xlab("Position") + ylab("-log10 FDR") +  scale_color_manual(values = rep(c("#276FBF", "#183059"), nCHR)) +
scale_x_continuous(label = axis.set$CHR, breaks = axis.set$center)+ theme(legend.position = "none")+ theme(axis.text = element_text(size = 8)) + coord_cartesian(ylim = c(0,10))
one
one <- ggplot(df_plot[which(df_plot$groups=="Before"),], aes(x = BPcum, y = -log10(P), col = as.factor(CHR))) + geom_point(alpha = 1, cex = 2) + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_hline(yintercept = -log10(fdr_thr), linetype = "dashed") + xlab("Position") + ylab("-log10 FDR") +  scale_color_manual(values = rep(c("#276FBF", "#183059"), nCHR)) +
scale_x_continuous(label = axis.set$CHR, breaks = axis.set$center)+ theme(legend.position = "none")+ theme(axis.text = element_text(size = 8)) + coord_cartesian(ylim = c(0,10))
one
library(png)
library(hexSticker)
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
hex = sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
png(
filename = "sticker.png",
width = 43.9,
height = 50.8,
bg = "transparent",
units = "mm",
type = "cairo-png",
antialias = "subpixel",
res = 300
)
sticker(gg, package="fcfdr", p_size=6, s_x=1, s_y=.8, s_width=1.5, s_height=2,
h_fill = "black", h_color = "#276FBF",
filename="hexsticker/test.png")
cab <- rasterGrob(cab,
x = 0.5, y = 0.5,
interpolate = TRUE)
cab <- rasterGrob(cab,x = 0.5, y = 0.5,
interpolate = TRUE)
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
gg
library(png)
library(hexSticker)
cab <- readPNG("hexsticker/hex.png")
cab <- rasterGrob(cab, width = 1, x = 0.5, y = 0.5,
interpolate = TRUE)
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
dev.off()
gg <- ggplot() +
annotation_custom(cab) +
theme_void()
gg
cab
plot(cab)
grid.raster(cab)
svglite::svglite('hexsticker/hex.png', width=4, height=4)
print(ggplot2::qplot(1:1000) + ggplot2::annotation_custom(grob))
print(ggplot() + ggplot2::annotation_custom(grob))
print(ggplot() + ggplot2::annotation_custom(cab))
gg
grDevices::dev.off()
gg
head(res)
log10pv_plot <- function(output, axis_lim = c(min(-log10(output[[1]]$p), max(-log10(output[[1]]$p))))){
df <- output[[1]]
mid <- median(df$q)
ggplot(df, aes(x = -log10(p), y = -log10(v), col = q)) + geom_point() + theme_cowplot(12) + background_grid(major = "xy", minor = "none") + geom_abline(intercept = 0, slope = 1,  linetype="dashed") + xlab("raw p-values (-log10)") + ylab("v-values (-log10)") + ggtitle(paste0("Flexible cFDR results")) + scale_color_gradient2(midpoint = mid, low = "blue", mid = "white", high = "red", space = "Lab") + coord_cartesian(ylim = axis_lim, xlim = axis_lim)
}
output <- list(res, 1)
ouput
str(output)
output <- list(data.frame(p = res$p, v = res$v1, q = res$q1), 1)
output <- list(res, 1)
output <- list(data.frame(p = res$p, v = res$v1, q = res$q1), 1)
str(output)
log10pv_plot(output)
min(-log10(output[[1]]$p)
)
getwd()
setwd("~/Google Drive/PhD/cFDR_appnote")
x <- readRDS("T1D_application_data.RDS")
df <- x
df
save(df, "T1D.RData")
save(df, file = "T1D.RData")
=======
load_all()
library(devtool)
library(devtools)
load_all()
load_all()
check()
check()
use_mit_license()
use_mit_license(Anna Hutcinson)
check()
check()
check()
check()
check()
usethis::use_vignette("fcfdr-vignette")
load(fcfdr)
load_all()
document()
build_vignettes()
load_all()
build_vignettes()
.Last.error.trace
library(fcfdr)
set.seed(1)
n = 50000
n1p = 500 # associated variants
zp = c(rnorm(n1p, sd=5), rnorm(n-n1p, sd=1)) # z-scores
p = 2*pnorm(-abs(zp)) # convert to p-values
mixture_comp1 <- function(x) rnorm(x, mean = -0.5, sd = 0.5)
mixture_comp2 <- function(x) rnorm(x, mean = 2, sd = 1)
n = length(p)
z = runif(n)
q <- c(mixture_comp1(n1p), mixture_comp2(n-n1p))
hist(q)
corr_plot(p, q)
res <- flexible_cfdr(p, q, indep_index = seq(1, n, 1), rmseg = TRUE)
build_vignettes()
document()
library(fcfdr)
build_vignettes()
check()
library(devtools)
build_readme()
use_readme_rmd(open = rlang::is_interactive())
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
>>>>>>> 9f4d11885d8c88bf477fe8dd9ee1195da98da514
devtools::document()
devtools::load_all()
devtools::build()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
set.seed(1)
library(fcfdr)
n = 50000
n1p = 500 # associated variants
zp = c(rnorm(n1p, sd=5), rnorm(n-n1p, sd=1)) # z-scores
p = 2*pnorm(-abs(zp)) # convert to p-values
hist(p)
mixture_comp1 <- function(x) rnorm(x, mean = -0.5, sd = 0.5)
mixture_comp2 <- function(x) rnorm(x, mean = 2, sd = 1)
n = length(p)
z = runif(n)
q <- c(mixture_comp1(n1p), mixture_comp2(n-n1p))
hist(q)
corr_plot(p, q)
res <- flexible_cfdr(p, q, indep_index = seq(1, n, 1))
str(res)
p = res[[1]]$p
q = res[[1]]$q
v = res[[1]]$v
pv_plot(p, q, v)
log10pv_plot(p, q, v,
axis_lim = c(0, 10)) # zoom in to interesting region
hit = which(p.adjust(v, method = "BH") <= 0.05)
hit_p = which(p.adjust(p, method = "BH") <= 0.05)
hit
1- (length(intersect(hit,c(1:500)))/length(hit))
1- (length(intersect(hit_p,c(1:500)))/length(hit_p))
hit_p
which(hit <= 500)
which(hit !%in% hit_p)
which(!hit %in% hit_p)
hit
hit_p
which(!hit %in% hit_p)
intersect(hit,c(1:500)
)
!hit %in% hit_p
hit[!hit %in% hit_p]
pv_plot(p = p, q = q, v = v)
devtools::load_all()
rm(list = c("n"))
devtools::load_all()
devtools::check()
pkgdown::build_site()
pkgdown::build_site()
setwd("~/Google Drive/PhD/Supervisor meetings/functional_genomics/application/18nov")
new_robertson_gwas <- readRDS("robertson2020_hg19.RDS")
head(new_ro)
head(new_robertson_gwas)
snp_data <- new_robertson_gwas[,c("ID","hg19_pos","chromosome","pphaseIandIII")]
snp_data <- new_robertson_gwas[,c("ID","hg19_pos","chromosome","pphaseIandII")]
colnames(snp_data) <- c("SNP","BP","CHR","P")
head(snp_data)
for(i in 1:22){
write.table(snp_data[which(snp_data$CHR==i),], file = paste0("loci/chr",i,".assoc"), quote = FALSE, row.names=FALSE)
}
ldak_weights <- read.table("loci/results.clumping.txt")
str(ldak_weights)
res <- readRDS("res_calderon_matching.RDS")
str(res)
p <- res[[1]]$pphaseIandII
not <- which(is.na(res[[1]]$logFC))
not
res[[1]]$group <- cut(res[[1]][-not, "logFC"], breaks = quantile(res[[1]][-not, "logFC"]))
res[[1]][-not, "logFC"]
res[[1]]$group <- cut(c(res[[1]][-not, "logFC"]), breaks = quantile(res[[1]][-not, "logFC"]))
res[[1]]$group <- cut(c(res[[1]][-not, "logFC"]), breaks = quantile(c(res[[1]][-not, "logFC"])))
res[[1]]$logFC[-not]
res[[1]]$group <- cut(res[[1]]$logFC[-not], breaks = quantile(res[[1]]$logFC[-not]))
not <- which(is.na(res[[1]]$logFC))
res[[1]]$group[-not] <- cut(res[[1]]$logFC[-not], breaks = quantile(res[[1]]$logFC[-not]))
head(res[[1]])
p[not]
m <- melt(res[[1]][,c("pphaseIanII","group")])
m <- melt(res[[1]][,c("pphaseIandII","group")])
m
m <- melt(res[[1]][,c("pphaseIandII","group")], "group")
m
unique(m$group)
quantile(res[[1]]$logFC[-not])
not <- which(is.na(res[[1]]$logFC))
res[[1]]$group[-not] <- cut(res[[1]]$logFC[-not], breaks = quantile(res[[1]]$logFC[-not]))
res[[1]]$group[-not]
m <- melt(res[[1]][,c("pphaseIandII","group")], "group")
unique(m$group)
qqplot(p[not], p[which(m$group==levels(m$group[1]))])
qqplot(p[not], p[which(m$group==levels(m$group[2]))])
p[not]
p[which(m$group==levels(m$group[2]))]
qqplot(p[not], p[which(m$group==levels(m$group)[2])])
p[which(m$group==levels(m$group)[2])]
levels(m$group)[2]
unique(m$group)
qqplot(p[not], p[which(m$group==unique(m$group)[2])])
p <- res[[1]]$pphaseIandII
x <- res[[1]]
not <- which(is.na(x$logFC))
not
x$logFC[-not]
x$group[-not] <- cut(x$logFC[-not], breaks = quantile(x$logFC[-not]))
head(x)
quantile(x$logFC[-not])
unique(x$group)
table(x$group)
m <- melt(x[,c("pphaseIandII","group")], "group")
unique(m$group)
m
split(m, group)
split(m, m$group)
lapply(split(m, m$group), function(x) mean(x$value))
m <- melt(res[,c("V5","group","logFC")],"group")
head(res)
m <- melt(x[,c("pphaseIandII","group", "logFC")], "group")
head(m)
m <- melt(x[,c("logFC","group")], "group")
head(m)
lapply(split(m, m$group), function(x) mean(x$value))
m <- melt(x[,c("pphaseIandII","group")], "group")
unique(m$group)
qqplot(p[not], p[which(m$group==1)])
qqplot(p[not], p[which(m$group==1)], pch = 16)
points(p[not], p[which(m$group==2)], pch = 16, col = "red")
points(qqplot(p[not], p[which(m$group==2)],plot.it = F), pch = 16, col = "red")
points(qqplot(p[not], p[which(m$group==3)],plot.it = F), pch = 16, col = "blue")
points(qqplot(p[not], p[which(m$group==4)],plot.it = F), pch = 16, col = "green")
qqplot(-log10(p[not]), -log10(p[which(m$group==1)]), ylab = "SNPs in peak (stratifed by logFC)", xlab = "SNPs not in peak", pch = 16, main = "Stratified QQ plot for (-log10) p-vals")
p[which(m$group==1)]
abline(0,1)
points(qqplot(-log10(p[not]), -log10(p[which(m$group==2)]),plot.it = F), pch = 16, col = "red")
points(qqplot(-log10(p[not]), -log10(p[which(m$group==3)]),plot.it = F), pch = 16, col = "blue")
points(qqplot(-log10(p[not]), -log10(p[which(m$group==4)]),plot.it = F), pch = 16, col = "green")
quantile(x$logFC[-not])
legend(200,150, legend = c(0.25, 0.5, 0.75, 1), col = c("black","red","blue","green"), pch = 16, title = "logFC quantile")
legend(150,3, legend = c(0.25, 0.5, 0.75, 1), col = c("black","red","blue","green"), pch = 16, title = "logFC quantile")
qs_logFC <- lapply(res, function(x){
x$logFC[is.na(x$logFC)] <- 0
x$logFC
})
p <- res[[1]]$pphaseIandII
q
qs_logFC
x <- res[[1]]
not <- which(is.na(x$logFC))
qqplot(p[not], p[-not])
qqplot(-log10(p[not]), -log10(p[which(m$group==1)]), ylab = "SNPs in peak (stratifed by logFC)", xlab = "SNPs not in peak", pch = 16, main = "Stratified QQ plot for (-log10) p-vals")
headd(m)
head(m)
qqplot(-log10(p[not]), -log10(m$value[which(m$group==1)]), ylab = "SNPs in peak (stratifed by logFC)", xlab = "SNPs not in peak", pch = 16, main = "Stratified QQ plot for (-log10) p-vals")
abline(0,1)
qqplot(-log10(p[not]), -log10(m$value[which(m$group==1)]), ylab = "SNPs in peak (stratifed by logFC)", xlab = "SNPs not in peak", pch = 16, main = "Stratified QQ plot for (-log10) p-vals")
abline(0,1)
points(qqplot(-log10(p[not]), -log10(m$value[which(m$group==2)]),plot.it = F), pch = 16, col = "red")
points(qqplot(-log10(p[not]), -log10(m$value[which(m$group==3)]),plot.it = F), pch = 16, col = "blue")
points(qqplot(-log10(p[not]), -log10(m$value[which(m$group==4)]),plot.it = F), pch = 16, col = "green")
qqplot(-log10(p[not]), -log10(p[-not]), ylab = "SNPs in peak", xlab = "SNPs not in peak", pch = 16, main = "QQ plot for (-log10) p-vals")
abline(0,1)
str(qs_logFC)
# how many are non-zero
lapply(qs_logFC, function(x) length(which(x!=0)))
4/16
5/16
7/16
2/23
21/23
getwd
pkgdown::build_site()
devtools::document()
devtools::load_all()
devtools::check()
